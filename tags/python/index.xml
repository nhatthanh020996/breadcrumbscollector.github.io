<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on breadcrumbscollector</title>
    <link>https://nhatthanh020996.github.io/tags/python/</link>
    <description>Recent content in python on breadcrumbscollector</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://nhatthanh020996.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clean Architecture</title>
      <link>https://nhatthanh020996.github.io/clean/architecture/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/clean/architecture/</guid>
      <description>Mở đầu. Đầu tiên chúng ta phải thống nhất lại rằng Clean Architecture là 1 tên gọi được Robert Martin - một lập trình viên nổi tiếng người Mỹ đặt tên trong cuốn sách cùng tên nổi tiếng của ông, nó cũng giống như A architecture hay B architecture nào đó. Vì vậy Clean Architecture không nên hiểu là một kiến trúc tốt trong mọi hoàn cảnh. Dựa trên nhiều yếu tố như thời gian, độ phức tạp, tính thay đổi của dự án người lập trình viên sẽ chọn ra chọn đâu là kiến trúc code phù hợp nhất và nó không nhất thiết phải là Clean Architecture.</description>
    </item>
    
    <item>
      <title>Understanding Variable Behavior in Python and C: A Comparison</title>
      <link>https://nhatthanh020996.github.io/does-python-function-use-calling-value-or-calling-reference/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/does-python-function-use-calling-value-or-calling-reference/</guid>
      <description>In C. 1. Variable in C. We start with the following simple example:
#include &amp;lt;stdio.h&amp;gt; int main() { int x; printf(&amp;#34;address of x: %p&amp;#34;, &amp;amp;x); printf(&amp;#34;\nvalue of x: %d&amp;#34;, x); x = 1 printf(&amp;#34;address of x: %p&amp;#34;, &amp;amp;x); printf(&amp;#34;\nvalue of x: %d&amp;#34;, x); return 0; } // the result will be: /* address of x: 0x7ffcd47a5cc4 value of x: 0 address of x: 0x7ffcd47a5cc4 value of x: 1 */ In the above piece of code, when declaring x, we create a space that occupies 4bytes in memory for x variable.</description>
    </item>
    
  </channel>
</rss>
