[{"author":null,"categories":["Tech"],"content":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","date":1687651200,"description":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","dir":"post/","excerpt_html":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","excerpt_text":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","expirydate":-62135596800,"fuzzywordcount":2300,"html":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","keywords":null,"kind":"page","lang":"en","lastmod":1687651200,"objectID":"4b86f033d2325cf54c129d05439cb850","permalink":"https://nhatthanh020996.github.io/clean/architecture/","publishdate":"2023-06-25T00:00:00Z","readingtime":11,"relpermalink":"/clean/architecture/","section":"post","summary":"Mở đầu. Đầu tiên chúng ta phải thống nhất lại rằng Clean Architecture là 1 tên gọi được Robert Martin - một lập trình viên nổi tiếng người Mỹ đặt tên trong cuốn sách cùng tên nổi tiếng của ông, nó cũng giống như A architecture hay B architecture nào đó. Vì vậy Clean Architecture không nên hiểu là một kiến trúc tốt trong mọi hoàn cảnh. Dựa trên nhiều yếu tố như thời gian, độ phức tạp, tính thay đổi của dự án người lập trình viên sẽ chọn ra chọn đâu là kiến trúc code phù hợp nhất và nó không nhất thiết phải là Clean Architecture.","tags":["clean-architecture","python","django"],"title":"Clean Architecture","type":"post","url":"/clean/architecture/","weight":0,"wordcount":2240},{"author":null,"categories":["Tech"],"content":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","date":1686787200,"description":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","dir":"post/","excerpt_html":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","excerpt_text":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","keywords":null,"kind":"page","lang":"en","lastmod":1686787200,"objectID":"942a0608a4dd361c692ba12db1416f63","permalink":"https://nhatthanh020996.github.io/does-python-function-use-calling-value-or-calling-reference/","publishdate":"2023-06-15T00:00:00Z","readingtime":6,"relpermalink":"/does-python-function-use-calling-value-or-calling-reference/","section":"post","summary":"In C. 1. Variable in C. We start with the following simple example:\n#include \u0026lt;stdio.h\u0026gt; int main() { int x; printf(\u0026#34;address of x: %p\u0026#34;, \u0026amp;x); printf(\u0026#34;\\nvalue of x: %d\u0026#34;, x); x = 1 printf(\u0026#34;address of x: %p\u0026#34;, \u0026amp;x); printf(\u0026#34;\\nvalue of x: %d\u0026#34;, x); return 0; } // the result will be: /* address of x: 0x7ffcd47a5cc4 value of x: 0 address of x: 0x7ffcd47a5cc4 value of x: 1 */ In the above piece of code, when declaring x, we create a space that occupies 4bytes in memory for x variable.","tags":["Python"],"title":"Understanding Variable Behavior in Python and C: A Comparison","type":"post","url":"/does-python-function-use-calling-value-or-calling-reference/","weight":0,"wordcount":1243},{"author":null,"categories":["Tech"],"content":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","date":1686700800,"description":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","dir":"post/","excerpt_html":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","excerpt_text":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","expirydate":-62135596800,"fuzzywordcount":100,"html":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","keywords":null,"kind":"page","lang":"en","lastmod":1686700800,"objectID":"8fa936575675c6bfad7f3b8bbec223cf","permalink":"https://nhatthanh020996.github.io/how-to-optimize-sql-query/","publishdate":"2023-06-14T00:00:00Z","readingtime":1,"relpermalink":"/how-to-optimize-sql-query/","section":"post","summary":"Optimize network Keep connection.\nCreate connection pooling.\nIntegrate many query in a connection.\nOptimize query execution Avoid n+1 problem.\nUsing EXPLAIN query to inspect the query plan.\nIndexing.\nPartition.\nSharding.\nScale hardware Vertical scale (scale up)\nHorizontal scale using Master-Slave architecture (scale out).","tags":["Database","PostgreSQL"],"title":"How to optimize sql query","type":"post","url":"/how-to-optimize-sql-query/","weight":0,"wordcount":43},{"author":null,"categories":["Tech"],"content":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","date":1686614400,"description":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","dir":"post/","excerpt_html":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","excerpt_text":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","expirydate":-62135596800,"fuzzywordcount":200,"html":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","keywords":null,"kind":"page","lang":"en","lastmod":1686614400,"objectID":"842bb65761814ef2a917d81da2e0e44b","permalink":"https://nhatthanh020996.github.io/isolation/","publishdate":"2023-06-13T00:00:00Z","readingtime":1,"relpermalink":"/isolation/","section":"post","summary":"Read Phenomena Dirty reads: if you are in an inflight transaction, you can read something that some other transaction has written but didn’t really commit yet.\nNon-repeatable reads: if you read a row once, then read it again, the second read could see different data if another transaction has modified it.\nPhantom reads: if you run a query twice, the second query could see different rows if another transaction has inserted or deleted them.","tags":["Database","PostgreSQL"],"title":"Isolation property in ACID","type":"post","url":"/isolation/","weight":0,"wordcount":196},{"author":null,"categories":["Tech"],"content":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","date":1686614400,"description":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","dir":"post/","excerpt_html":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","excerpt_text":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","keywords":null,"kind":"page","lang":"en","lastmod":1686614400,"objectID":"7003dddea6bc933428fb37f48722ea46","permalink":"https://nhatthanh020996.github.io/pgbouncer/","publishdate":"2023-06-13T00:00:00Z","readingtime":0,"relpermalink":"/pgbouncer/","section":"post","summary":"","tags":["Database","PostgreSQL","Pooling"],"title":"Pgbouncer","type":"post","url":"/pgbouncer/","weight":0,"wordcount":0},{"author":null,"categories":["Tech"],"content":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","date":1686528000,"description":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","dir":"post/","excerpt_html":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","excerpt_text":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","keywords":null,"kind":"page","lang":"en","lastmod":1686528000,"objectID":"92729ebeab8a0023fd0bf3c644bb0d60","permalink":"https://nhatthanh020996.github.io/how-database-read-records-from-disk/","publishdate":"2023-06-12T00:00:00Z","readingtime":1,"relpermalink":"/how-database-read-records-from-disk/","section":"post","summary":"Dadabase disk page ","tags":["Database","PostgreSQL","Pooling"],"title":"How database read records from disk","type":"post","url":"/how-database-read-records-from-disk/","weight":0,"wordcount":3},{"author":null,"categories":["Tech"],"content":"","date":1686441600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1686441600,"objectID":"b642015834c1987c2533e756f6175b91","permalink":"https://nhatthanh020996.github.io/socket-programming/","publishdate":"2023-06-11T00:00:00Z","readingtime":1,"relpermalink":"/socket-programming/","section":"post","summary":"Introduction. Conclusion. ","tags":["TCP/IP","Socket"],"title":"Socket Programming","type":"post","url":"/socket-programming/","weight":0,"wordcount":2},{"author":null,"categories":["Tech"],"content":"This is the my fist post in this blog.","date":1686355200,"description":"This is the my fist post in this blog.","dir":"post/","excerpt_html":"This is the my fist post in this blog.","excerpt_text":"This is the my fist post in this blog.","expirydate":-62135596800,"fuzzywordcount":100,"html":"This is the my fist post in this blog.","keywords":null,"kind":"page","lang":"en","lastmod":1686355200,"objectID":"c483d9a1e55a8499f9fa0b9bc37ab254","permalink":"https://nhatthanh020996.github.io/testpage/","publishdate":"2023-06-10T00:00:00Z","readingtime":1,"relpermalink":"/testpage/","section":"post","summary":"Hello world! ","tags":["ACID","Database","PostgreSQL"],"title":"Hello world","type":"post","url":"/testpage/","weight":0,"wordcount":2},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://nhatthanh020996.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me Huabing Zhao is a software architect, an Istio Member and an ONAP PTL. He has a solid experience in the information and telecommunication technology industry for more than 17 years. Throughout his career, he has built a number of large-scale, cross-country software systems, most of them are still running in production. He loves open source and has been contributing to various open source projects, he is a member","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":500}]