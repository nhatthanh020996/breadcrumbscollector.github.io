[{"author":null,"categories":["Tech"],"content":"Internet là tập hợp nhiều thiết bị tính toán được kết nối lại với nhau cho phép chúng ta có thể gửi tin nhắn, voice calls, video calls, online shoping ... Trong bài viết này mình sẽ nói về những network components chính của Internet","date":1699056000,"description":"Internet là tập hợp nhiều thiết bị tính toán được kết nối lại với nhau cho phép chúng ta có thể gửi tin nhắn, voice calls, video calls, online shoping ... Trong bài viết này mình sẽ nói về những network components chính của Internet","dir":"post/","excerpt_html":"Internet là tập hợp nhiều thiết bị tính toán được kết nối lại với nhau cho phép chúng ta có thể gửi tin nhắn, voice calls, video calls, online shoping ... Trong bài viết này mình sẽ nói về những network components chính của Internet","excerpt_text":"Internet là tập hợp nhiều thiết bị tính toán được kết nối lại với nhau cho phép chúng ta có thể gửi tin nhắn, voice calls, video calls, online shoping ... Trong bài viết này mình sẽ nói về những network components chính của Internet","expirydate":-62135596800,"fuzzywordcount":600,"html":"Internet là tập hợp nhiều thiết bị tính toán được kết nối lại với nhau cho phép chúng ta có thể gửi tin nhắn, voice calls, video calls, online shoping ... Trong bài viết này mình sẽ nói về những network components chính của Internet","keywords":null,"kind":"page","lang":"en","lastmod":1699056000,"objectID":"b719b2df714172d4b23e5c1dec04b7f0","permalink":"https://nhatthanh020996.github.io/socket-programing-p1/","publishdate":"2023-11-04T00:00:00Z","readingtime":3,"relpermalink":"/socket-programing-p1/","section":"post","summary":"1. End Points End points bao là những thành phần như: máy tính, máy tính bảng, điện thoại, server, máy in, \u0026hellip; là những thành phần đầu và cuối trong một kết nối internet.\n2. Network Interface Card - NIC. NIC bao gồm những thiết bị chúng ta thường gặp như wifi card, card mạng, \u0026hellip; Là thành phần giúp covert những loại tín hiệu như: electrical signal, light signal, radio signal về 1001 - tức data mà máy tính có thể hiểu.","tags":["TCP/IP","Socket","Networking"],"title":"Computer Network (P1) - Network components","type":"post","url":"/socket-programing-p1/","weight":0,"wordcount":519},{"author":null,"categories":["Tech"],"content":"Trong bài viết này mình sẽ giới thiệu về OSI Model - Open System Interconnection Model, model này sẽ giúp chúng ta hiểu được cách mà data được truyền đi giữa các end points trong mạng INTERNET.","date":1699056000,"description":"Trong bài viết này mình sẽ giới thiệu về OSI Model - Open System Interconnection Model, model này sẽ giúp chúng ta hiểu được cách mà data được truyền đi giữa các end points trong mạng INTERNET.","dir":"post/","excerpt_html":"Trong bài viết này mình sẽ giới thiệu về OSI Model - Open System Interconnection Model, model này sẽ giúp chúng ta hiểu được cách mà data được truyền đi giữa các end points trong mạng INTERNET.","excerpt_text":"Trong bài viết này mình sẽ giới thiệu về OSI Model - Open System Interconnection Model, model này sẽ giúp chúng ta hiểu được cách mà data được truyền đi giữa các end points trong mạng INTERNET.","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Trong bài viết này mình sẽ giới thiệu về OSI Model - Open System Interconnection Model, model này sẽ giúp chúng ta hiểu được cách mà data được truyền đi giữa các end points trong mạng INTERNET.","keywords":null,"kind":"page","lang":"en","lastmod":1699056000,"objectID":"6cbea13675868b7f50bc2c07c5e97533","permalink":"https://nhatthanh020996.github.io/socket-programing-p3/","publishdate":"2023-11-04T00:00:00Z","readingtime":7,"relpermalink":"/socket-programing-p3/","section":"post","summary":"1. Introduction. Trước khi đến đọc bài viết này, các bạn nên tham khảo bài viết trước link này, việc nắm rõ các physical components trong một INTERNET là tiền đề để hiểu bài viết này rõ ràng hơn, và dễ để tượng tượng hơn.\nTrong bài viết này, chúng ta sẽ tập trung để trả lời câu hỏi: Làm thế nào mà 2 máy tính có thể communicate được với nhau qua một computer network?","tags":["TCP/IP","Socket","Networking"],"title":"Computer Network (P2) - OSI Model","type":"post","url":"/socket-programing-p3/","weight":0,"wordcount":1296},{"author":null,"categories":["Tech"],"content":"Bài viết này mình sẽ cùng tìm hiểu về Berkeley Socket API hay còn gọi ngắn gọn hơn là socket - một trong những khái niệm quan trọng nhất trong computer network.","date":1698796800,"description":"Bài viết này mình sẽ cùng tìm hiểu về Berkeley Socket API hay còn gọi ngắn gọn hơn là socket - một trong những khái niệm quan trọng nhất trong computer network.","dir":"post/","excerpt_html":"Bài viết này mình sẽ cùng tìm hiểu về Berkeley Socket API hay còn gọi ngắn gọn hơn là socket - một trong những khái niệm quan trọng nhất trong computer network.","excerpt_text":"Bài viết này mình sẽ cùng tìm hiểu về Berkeley Socket API hay còn gọi ngắn gọn hơn là socket - một trong những khái niệm quan trọng nhất trong computer network.","expirydate":-62135596800,"fuzzywordcount":1400,"html":"Bài viết này mình sẽ cùng tìm hiểu về Berkeley Socket API hay còn gọi ngắn gọn hơn là socket - một trong những khái niệm quan trọng nhất trong computer network.","keywords":null,"kind":"page","lang":"en","lastmod":1698796800,"objectID":"00af2a87c3d973442bf001cbb894cb99","permalink":"https://nhatthanh020996.github.io/socket-programming-p2/","publishdate":"2023-11-01T00:00:00Z","readingtime":7,"relpermalink":"/socket-programming-p2/","section":"post","summary":"1. Introduction. Socket là một trong những kiến thức low-level nhất và quan trọng nhất của computer networking. Nắm vững kiến thức về socket là tiền đề quan trọng để tiếp cận những kiến thức high-level hơn về computer networking như, TCP/IP protocol, HTTP, Websocket, SSH \u0026hellip; Bài viết này sẽ cung cấp cho bạn những kiến thức cơ bản sau:\nLịch sử ra đời của ARPANET và TCP/IP.\nTìm hiểu về Berkeley Socket API.","tags":["TCP/IP","Socket","Networking"],"title":"Computer Network (P2) - Berkeley Socket API","type":"post","url":"/socket-programming-p2/","weight":0,"wordcount":1399},{"author":null,"categories":["Tech"],"content":"Khi tồn tại nhiều processes trong hệ thống, làm thế nào để Operating System có thể cấp phát bộ nhớ cho những processes này một cách hợp lý nhất. Memory Management là một trong những nhiệm vụ quan trọng nhất của OS, và trong bài viết này mình sẽ nói về điều này.","date":1698364800,"description":"Khi tồn tại nhiều processes trong hệ thống, làm thế nào để Operating System có thể cấp phát bộ nhớ cho những processes này một cách hợp lý nhất. Memory Management là một trong những nhiệm vụ quan trọng nhất của OS, và trong bài viết này mình sẽ nói về điều này.","dir":"post/","excerpt_html":"Khi tồn tại nhiều processes trong hệ thống, làm thế nào để Operating System có thể cấp phát bộ nhớ cho những processes này một cách hợp lý nhất. Memory Management là một trong những nhiệm vụ quan trọng nhất của OS, và trong bài viết này mình sẽ nói về điều này.","excerpt_text":"Khi tồn tại nhiều processes trong hệ thống, làm thế nào để Operating System có thể cấp phát bộ nhớ cho những processes này một cách hợp lý nhất. Memory Management là một trong những nhiệm vụ quan trọng nhất của OS, và trong bài viết này mình sẽ nói về điều này.","expirydate":-62135596800,"fuzzywordcount":900,"html":"Khi tồn tại nhiều processes trong hệ thống, làm thế nào để Operating System có thể cấp phát bộ nhớ cho những processes này một cách hợp lý nhất. Memory Management là một trong những nhiệm vụ quan trọng nhất của OS, và trong bài viết này mình sẽ nói về điều này.","keywords":null,"kind":"page","lang":"en","lastmod":1698364800,"objectID":"6a66a14f4b4e0d8bb44ae565dd9fd072","permalink":"https://nhatthanh020996.github.io/how-does-operating-system-manage-memory/","publishdate":"2023-10-27T00:00:00Z","readingtime":4,"relpermalink":"/how-does-operating-system-manage-memory/","section":"post","summary":"1. Logical vs Physical Address Space. 1.1. Logical address. Logical address sẽ được sinh ra ở lúc biên dịch chương trình, Ví dụ ta có một chương trình đơn giản helloworld như sau:\n.data msg: .asciiz \u0026#34;Hello world! \\n\u0026#34; .text li $v0, 4 la $a0, msg syscall Sau khi biên dịch, ta sẽ thấy được logical address của mỗi instruction như sau:\nCác giá trị ở cột Address chính là logical address của mỗi instruction tương ứng.","tags":["Operating system"],"title":"Operating System (P3) - Memory Management","type":"post","url":"/how-does-operating-system-manage-memory/","weight":0,"wordcount":825},{"author":null,"categories":["Tech"],"content":"Ở trong bài viết trước về Process, mình đã có nói đến một memory representation của một process sẽ gồm những segment nào? Trong bài viết này mình sẽ nói kỹ hơn về các phần của một memory representation sẽ thay đổi ra sao trong quá trình thực thi process.","date":1698105600,"description":"Ở trong bài viết trước về Process, mình đã có nói đến một memory representation của một process sẽ gồm những segment nào? Trong bài viết này mình sẽ nói kỹ hơn về các phần của một memory representation sẽ thay đổi ra sao trong quá trình thực thi process.","dir":"post/","excerpt_html":"Ở trong bài viết trước về Process, mình đã có nói đến một memory representation của một process sẽ gồm những segment nào? Trong bài viết này mình sẽ nói kỹ hơn về các phần của một memory representation sẽ thay đổi ra sao trong quá trình thực thi process.","excerpt_text":"Ở trong bài viết trước về Process, mình đã có nói đến một memory representation của một process sẽ gồm những segment nào? Trong bài viết này mình sẽ nói kỹ hơn về các phần của một memory representation sẽ thay đổi ra sao trong quá trình thực thi process.","expirydate":-62135596800,"fuzzywordcount":1000,"html":"Ở trong bài viết trước về Process, mình đã có nói đến một memory representation của một process sẽ gồm những segment nào? Trong bài viết này mình sẽ nói kỹ hơn về các phần của một memory representation sẽ thay đổi ra sao trong quá trình thực thi process.","keywords":null,"kind":"page","lang":"en","lastmod":1698105600,"objectID":"2baaca00eefb8753e8558a7e97abdcca","permalink":"https://nhatthanh020996.github.io/process-memory-layer/","publishdate":"2023-10-24T00:00:00Z","readingtime":5,"relpermalink":"/process-memory-layer/","section":"post","summary":"2. Memory layers. Memory layers của một process sẽ 4 segment chính như hình vẽ dưới đây. Hình ảnh trên biểu thị memory layout của một chương trình C, ở đây data segment được chia ra bao gồm uninitialized data và initialized data, nhưng để cho đơn giản ta sẽ gọi 2 phần này là data segment.\nSau khi process được OS cung cấp memory, sẽ có data segment và text segment là những vùng nhớ cố định, không thay đổi về cả kích thước lẫn nội dung của 2 vùng nhớ này trong suốt quá trình process được thực thi.","tags":["Operating system"],"title":"Operating System (P2) - Memory Layers Of A Process","type":"post","url":"/process-memory-layer/","weight":0,"wordcount":923},{"author":null,"categories":["Tech"],"content":"Mình sẽ mở đầu series về Operating System với Process Management - một trong những phần quan trọng nhất trong nguyên lý hệ điều hành.","date":1697760000,"description":"Mình sẽ mở đầu series về Operating System với Process Management - một trong những phần quan trọng nhất trong nguyên lý hệ điều hành.","dir":"post/","excerpt_html":"Mình sẽ mở đầu series về Operating System với Process Management - một trong những phần quan trọng nhất trong nguyên lý hệ điều hành.","excerpt_text":"Mình sẽ mở đầu series về Operating System với Process Management - một trong những phần quan trọng nhất trong nguyên lý hệ điều hành.","expirydate":-62135596800,"fuzzywordcount":1900,"html":"Mình sẽ mở đầu series về Operating System với Process Management - một trong những phần quan trọng nhất trong nguyên lý hệ điều hành.","keywords":null,"kind":"page","lang":"en","lastmod":1697760000,"objectID":"485eaff9f44feb3ed1a2bcc1b2444777","permalink":"https://nhatthanh020996.github.io/what-is-process/","publishdate":"2023-10-20T00:00:00Z","readingtime":9,"relpermalink":"/what-is-process/","section":"post","summary":"1. Process concept. 1.1. The Process. Một chương trình đang được thực thi bởi máy tính gọi là Process, ví dụ: Bạn có một chương trình helloworld được viết bằng C trong file helloworld.c như sau:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello, World!\\n\u0026#34;); return 0; } Bạn tiến hành biên dịch chương trình trên bằng câu lệnh sau trên terminal:\ngcc helloworld.c -o helloworld Bạn tiếp tục chạy câu lệnh sau trên terminal:","tags":["Operating system"],"title":"Operating System (P1) - Process.","type":"post","url":"/what-is-process/","weight":0,"wordcount":1816},{"author":null,"categories":["Tech"],"content":"Những môn học nào được học ở đại học mà bạn cho là quan trọng nhất? Kiến thức ở trường đại học có thực sự hữu dụng khi chúng ta đi làm hay không? Trong bài viết này mình sẽ nói ra quan điểm của mình về vấn đề này.","date":1697500800,"description":"Những môn học nào được học ở đại học mà bạn cho là quan trọng nhất? Kiến thức ở trường đại học có thực sự hữu dụng khi chúng ta đi làm hay không? Trong bài viết này mình sẽ nói ra quan điểm của mình về vấn đề này.","dir":"post/","excerpt_html":"Những môn học nào được học ở đại học mà bạn cho là quan trọng nhất? Kiến thức ở trường đại học có thực sự hữu dụng khi chúng ta đi làm hay không? Trong bài viết này mình sẽ nói ra quan điểm của mình về vấn đề này.","excerpt_text":"Những môn học nào được học ở đại học mà bạn cho là quan trọng nhất? Kiến thức ở trường đại học có thực sự hữu dụng khi chúng ta đi làm hay không? Trong bài viết này mình sẽ nói ra quan điểm của mình về vấn đề này.","expirydate":-62135596800,"fuzzywordcount":1000,"html":"Những môn học nào được học ở đại học mà bạn cho là quan trọng nhất? Kiến thức ở trường đại học có thực sự hữu dụng khi chúng ta đi làm hay không? Trong bài viết này mình sẽ nói ra quan điểm của mình về vấn đề này.","keywords":null,"kind":"page","lang":"en","lastmod":1697500800,"objectID":"1d639e2a1b3edfb0701994a4164dd91b","permalink":"https://nhatthanh020996.github.io/what-the-benefit-studying-university-bring-to-me/","publishdate":"2023-10-17T00:00:00Z","readingtime":5,"relpermalink":"/what-the-benefit-studying-university-bring-to-me/","section":"post","summary":"Mình cũng từng học đại học, chuyên ngành Khoa học máy tính ở Đại học Bách Khoa Hà Nội. Những năm đi học cho đến khi ra trường khoảng 1-2 năm, mình luôn băn khoăn về việc liệu có đáng để bỏ thời gian 5 năm, với hàng trăm triệu tiền để học đại học hay không. Trong khi đó, có nhiều bạn học tại các trung tâm chỉ cần 6 tháng là có thể bắt đầu làm việc, hoặc học những khoá học Udemy giúp mình nắm kiến thức trong thời gian ngắn.","tags":["Discussion"],"title":"Kiến thức ở trường đại học đã mang lại cho mình điều gì?","type":"post","url":"/what-the-benefit-studying-university-bring-to-me/","weight":0,"wordcount":930},{"author":null,"categories":["Tech"],"content":"Tiếp tục về Git Internal, trong bài viết này mình sẽ nói về cách git merge và git rebase vận hành, cũng như lúc nào thì dùng merge, lúc nào dùng rebase.","date":1697068800,"description":"Tiếp tục về Git Internal, trong bài viết này mình sẽ nói về cách git merge và git rebase vận hành, cũng như lúc nào thì dùng merge, lúc nào dùng rebase.","dir":"post/","excerpt_html":"Tiếp tục về Git Internal, trong bài viết này mình sẽ nói về cách git merge và git rebase vận hành, cũng như lúc nào thì dùng merge, lúc nào dùng rebase.","excerpt_text":"Tiếp tục về Git Internal, trong bài viết này mình sẽ nói về cách git merge và git rebase vận hành, cũng như lúc nào thì dùng merge, lúc nào dùng rebase.","expirydate":-62135596800,"fuzzywordcount":1200,"html":"Tiếp tục về Git Internal, trong bài viết này mình sẽ nói về cách git merge và git rebase vận hành, cũng như lúc nào thì dùng merge, lúc nào dùng rebase.","keywords":null,"kind":"page","lang":"en","lastmod":1697068800,"objectID":"fdd5656818cffbdfc611cafa7862c9c4","permalink":"https://nhatthanh020996.github.io/git-merge-and-git-rebase/","publishdate":"2023-10-12T00:00:00Z","readingtime":6,"relpermalink":"/git-merge-and-git-rebase/","section":"post","summary":"Git merge thực sự là gì? Giả sử chúng ta đang ở branch A và muốn merge branch B vào branch A với câu lệnh:\ngit merge B Sẽ có 2 trường hợp xuất hiện:\nB đang trỏ vào commit là commit cha của commit mà A đang trỏ vào. Ở đây Git sẽ tuân thủ fast forward strategy để merge B vào A. Kết quả sẽ xấy ra như ví dụ dưới đây: # A: C1 -\u0026gt; C2 -\u0026gt; C3 # B: C1 -\u0026gt; C2 -\u0026gt; C3 -\u0026gt; C4 -\u0026gt; C5 git merge B # result # A: C1 -\u0026gt; C2 -\u0026gt; C3 -\u0026gt; C4 -\u0026gt; C5 # B: C1 -\u0026gt; C2 -\u0026gt; C3 -\u0026gt; C4 -\u0026gt; C5 B đang trỏ vào commit không phải là cha của commit mà A đang trỏ vào.","tags":["Git"],"title":"Git Internal (P2) - Git rebase và git merge","type":"post","url":"/git-merge-and-git-rebase/","weight":0,"wordcount":1123},{"author":null,"categories":["Tech"],"content":"Git là một trong những công cụ quen thuộc nhất đối với bất kì một developer nào, chúng ta làm việc với nó gần như mỗi ngày, nhưng có một sự thật là có rất nhiều lập trình viên vẫn chưa đủ tự tin khi làm việc với Git. Trong bài viết này, mình xin chia sẻ những gì xẩy ra phía sau những câu lệnh Git của chúng ta, tất nhiên ở một độ sâu nào đó (không đến mức phải đọc từng dòng code C, vì mình chưa đủ năng lực để làm việc đó). Từ đây hi vọng chúng ta có thể hiểu đươc phần nào đó về cách Git hoạt động, cũng như tự tin hơn khi sử dụng nó.","date":1696636800,"description":"Git là một trong những công cụ quen thuộc nhất đối với bất kì một developer nào, chúng ta làm việc với nó gần như mỗi ngày, nhưng có một sự thật là có rất nhiều lập trình viên vẫn chưa đủ tự tin khi làm việc với Git. Trong bài viết này, mình xin chia sẻ những gì xẩy ra phía sau những câu lệnh Git của chúng ta, tất nhiên ở một độ sâu nào đó (không đến mức phải đọc từng dòng code C, vì mình chưa đủ năng lực để làm việc đó). Từ đây hi vọng chúng ta có thể hiểu đươc phần nào đó về cách Git hoạt động, cũng như tự tin hơn khi sử dụng nó.","dir":"post/","excerpt_html":"Git là một trong những công cụ quen thuộc nhất đối với bất kì một developer nào, chúng ta làm việc với nó gần như mỗi ngày, nhưng có một sự thật là có rất nhiều lập trình viên vẫn chưa đủ tự tin khi làm việc với Git. Trong bài viết này, mình xin chia sẻ những gì xẩy ra phía sau những câu lệnh Git của chúng ta, tất nhiên ở một độ sâu nào đó (không đến mức phải đọc từng dòng code C, vì mình chưa đủ năng lực để làm việc đó). Từ đây hi vọng chúng ta có thể hiểu đươc phần nào đó về cách Git hoạt động, cũng như tự tin hơn khi sử dụng nó.","excerpt_text":"Git là một trong những công cụ quen thuộc nhất đối với bất kì một developer nào, chúng ta làm việc với nó gần như mỗi ngày, nhưng có một sự thật là có rất nhiều lập trình viên vẫn chưa đủ tự tin khi làm việc với Git. Trong bài viết này, mình xin chia sẻ những gì xẩy ra phía sau những câu lệnh Git của chúng ta, tất nhiên ở một độ sâu nào đó (không đến mức phải đọc từng dòng code C, vì mình chưa đủ năng lực để làm việc đó). Từ đây hi vọng chúng ta có thể hiểu đươc phần nào đó về cách Git hoạt động, cũng như tự tin hơn khi sử dụng nó.","expirydate":-62135596800,"fuzzywordcount":2200,"html":"Git là một trong những công cụ quen thuộc nhất đối với bất kì một developer nào, chúng ta làm việc với nó gần như mỗi ngày, nhưng có một sự thật là có rất nhiều lập trình viên vẫn chưa đủ tự tin khi làm việc với Git. Trong bài viết này, mình xin chia sẻ những gì xẩy ra phía sau những câu lệnh Git của chúng ta, tất nhiên ở một độ sâu nào đó (không đến mức phải đọc từng dòng code C, vì mình chưa đủ năng lực để làm việc đó). Từ đây hi vọng chúng ta có thể hiểu đươc phần nào đó về cách Git hoạt động, cũng như tự tin hơn khi sử dụng nó.","keywords":null,"kind":"page","lang":"en","lastmod":1696636800,"objectID":"b9fbab6e3a9418ab874dd0481959d876","permalink":"https://nhatthanh020996.github.io/git-internal/","publishdate":"2023-10-07T00:00:00Z","readingtime":11,"relpermalink":"/git-internal/","section":"post","summary":"Mở đầu. Chắc là chúng ta sẽ không mất nhiều thời gian để nói về Git nữa vì chúng quá phổ biến và gần gũi đúng không nào. Mình chỉ chia sẻ một chi tiết khá thú vị về nguồn gốc ra đời Git, Git được sáng tạo ra bởi Linus Torvalds - một cái tên quá nổi tiếng trong thế giới phần mềm rồi đúng không. Theo như những gì chia sẻ trong một cuộc phỏng vấn ở Ted Talk của tác giả, Git được ra đời vì Torvalds muốn tạo ra một công cụ nào đó giúp ông quản lý source code của Linux được hiệu quả hơn.","tags":["Git"],"title":"Git Internal (P1)","type":"post","url":"/git-internal/","weight":0,"wordcount":2194},{"author":null,"categories":["Tech"],"content":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","date":1687651200,"description":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","dir":"post/","excerpt_html":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","excerpt_text":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","expirydate":-62135596800,"fuzzywordcount":2500,"html":"Mỗi lập trình viên luôn muốn tạo ra những phần mềm mà nó dễ dàng thay đổi lúc business logic thay đổi, hoặc yêu cầu kỹ thuật có sự thay đổi. Họ muốn phần mềm của họ dễ dàng mở rộng, thêm những tính năng mới mà không ảnh hưởng đến những tính năng đang chạy. Để làm được điều đó chúng ta cần tích luỹ nhiều kinh nghiệm, kiến thức. Vậy có một mô hình chung nào, hoặc một tư tưởng thiết kế nào giúp ta làm điều đó dễ dàng hơn. Trong bài viết này mình xin giới thiệu một kiến trúc như thế, nó gọi là Clean Architecture.","keywords":null,"kind":"page","lang":"en","lastmod":1687651200,"objectID":"4b86f033d2325cf54c129d05439cb850","permalink":"https://nhatthanh020996.github.io/clean/architecture/","publishdate":"2023-06-25T00:00:00Z","readingtime":12,"relpermalink":"/clean/architecture/","section":"post","summary":"Mở đầu. Đầu tiên chúng ta phải thống nhất lại rằng Clean Architecture là 1 tên gọi được Robert Martin - một lập trình viên nổi tiếng người Mỹ đặt tên trong cuốn sách cùng tên nổi tiếng của ông, nó cũng giống như A architecture hay B architecture nào đó. Vì vậy Clean Architecture không nên hiểu là một kiến trúc tốt trong mọi hoàn cảnh. Dựa trên nhiều yếu tố như thời gian, độ phức tạp, tính thay đổi của dự án người lập trình viên sẽ chọn ra chọn đâu là kiến trúc code phù hợp nhất và nó không nhất thiết phải là Clean Architecture.","tags":["clean-architecture","python","django"],"title":"Clean Architecture","type":"post","url":"/clean/architecture/","weight":0,"wordcount":2487},{"author":null,"categories":["Tech"],"content":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","date":1686787200,"description":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","dir":"post/","excerpt_html":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","excerpt_text":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Discover the differences in variable behavior between Python and C programming languages. Explore topics such as passing by value and reference, immutable and mutable objects, and their impact on stored values. Through concise code examples, gain insights into how variables are handled in these languages. Unveil the distinctions in variable manipulation in this concise article.","keywords":null,"kind":"page","lang":"en","lastmod":1686787200,"objectID":"942a0608a4dd361c692ba12db1416f63","permalink":"https://nhatthanh020996.github.io/does-python-function-use-calling-value-or-calling-reference/","publishdate":"2023-06-15T00:00:00Z","readingtime":6,"relpermalink":"/does-python-function-use-calling-value-or-calling-reference/","section":"post","summary":"In C. 1. Variable in C. We start with the following simple example:\n#include \u0026lt;stdio.h\u0026gt; int main() { int x; printf(\u0026#34;address of x: %p\u0026#34;, \u0026amp;x); printf(\u0026#34;\\nvalue of x: %d\u0026#34;, x); x = 1 printf(\u0026#34;address of x: %p\u0026#34;, \u0026amp;x); printf(\u0026#34;\\nvalue of x: %d\u0026#34;, x); return 0; } // the result will be: /* address of x: 0x7ffcd47a5cc4 value of x: 0 address of x: 0x7ffcd47a5cc4 value of x: 1 */ In the above piece of code, when declaring x, we create a space that occupies 4bytes in memory for x variable.","tags":["Python"],"title":"Understanding Variable Behavior in Python and C: A Comparison","type":"post","url":"/does-python-function-use-calling-value-or-calling-reference/","weight":0,"wordcount":1243},{"author":null,"categories":["Tech"],"content":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","date":1686700800,"description":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","dir":"post/","excerpt_html":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","excerpt_text":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","expirydate":-62135596800,"fuzzywordcount":100,"html":"Discover practical tips for optimizing network performance, query execution, and scaling hardware in a database system. Enhance efficiency and prepare for growth","keywords":null,"kind":"page","lang":"en","lastmod":1686700800,"objectID":"8fa936575675c6bfad7f3b8bbec223cf","permalink":"https://nhatthanh020996.github.io/how-to-optimize-sql-query/","publishdate":"2023-06-14T00:00:00Z","readingtime":1,"relpermalink":"/how-to-optimize-sql-query/","section":"post","summary":"Optimize network Keep connection.\nCreate connection pooling.\nIntegrate many query in a connection.\nOptimize query execution Avoid n+1 problem.\nUsing EXPLAIN query to inspect the query plan.\nIndexing.\nPartition.\nSharding.\nScale hardware Vertical scale (scale up)\nHorizontal scale using Master-Slave architecture (scale out).","tags":["Database","PostgreSQL"],"title":"How to optimize sql query","type":"post","url":"/how-to-optimize-sql-query/","weight":0,"wordcount":43},{"author":null,"categories":["Tech"],"content":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","date":1686614400,"description":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","dir":"post/","excerpt_html":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","excerpt_text":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","expirydate":-62135596800,"fuzzywordcount":200,"html":"Discover read phenomena and isolation levels in PostgreSQL databases, ensuring data consistency and concurrency control.","keywords":null,"kind":"page","lang":"en","lastmod":1686614400,"objectID":"842bb65761814ef2a917d81da2e0e44b","permalink":"https://nhatthanh020996.github.io/isolation/","publishdate":"2023-06-13T00:00:00Z","readingtime":1,"relpermalink":"/isolation/","section":"post","summary":"Read Phenomena Dirty reads: if you are in an inflight transaction, you can read something that some other transaction has written but didn’t really commit yet.\nNon-repeatable reads: if you read a row once, then read it again, the second read could see different data if another transaction has modified it.\nPhantom reads: if you run a query twice, the second query could see different rows if another transaction has inserted or deleted them.","tags":["Database","PostgreSQL"],"title":"Isolation property in ACID","type":"post","url":"/isolation/","weight":0,"wordcount":196},{"author":null,"categories":["Tech"],"content":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","date":1686614400,"description":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","dir":"post/","excerpt_html":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","excerpt_text":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Discover the power and benefits of using pgbouncer as a connection pooling tool for PostgreSQL databases.","keywords":null,"kind":"page","lang":"en","lastmod":1686614400,"objectID":"7003dddea6bc933428fb37f48722ea46","permalink":"https://nhatthanh020996.github.io/pgbouncer/","publishdate":"2023-06-13T00:00:00Z","readingtime":0,"relpermalink":"/pgbouncer/","section":"post","summary":"","tags":["Database","PostgreSQL","Pooling"],"title":"Pgbouncer","type":"post","url":"/pgbouncer/","weight":0,"wordcount":0},{"author":null,"categories":["Tech"],"content":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","date":1686528000,"description":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","dir":"post/","excerpt_html":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","excerpt_text":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Explore the process of reading records from disk in a database, unraveling the inner workings of data retrieval.","keywords":null,"kind":"page","lang":"en","lastmod":1686528000,"objectID":"92729ebeab8a0023fd0bf3c644bb0d60","permalink":"https://nhatthanh020996.github.io/how-database-read-records-from-disk/","publishdate":"2023-06-12T00:00:00Z","readingtime":1,"relpermalink":"/how-database-read-records-from-disk/","section":"post","summary":"Dadabase disk page ","tags":["Database","PostgreSQL","Pooling"],"title":"How database read records from disk","type":"post","url":"/how-database-read-records-from-disk/","weight":0,"wordcount":3},{"author":null,"categories":["Tech"],"content":"This is the my fist post in this blog.","date":1686355200,"description":"This is the my fist post in this blog.","dir":"post/","excerpt_html":"This is the my fist post in this blog.","excerpt_text":"This is the my fist post in this blog.","expirydate":-62135596800,"fuzzywordcount":100,"html":"This is the my fist post in this blog.","keywords":null,"kind":"page","lang":"en","lastmod":1686355200,"objectID":"c483d9a1e55a8499f9fa0b9bc37ab254","permalink":"https://nhatthanh020996.github.io/testpage/","publishdate":"2023-06-10T00:00:00Z","readingtime":1,"relpermalink":"/testpage/","section":"post","summary":"Hello world! ","tags":["ACID","Database","PostgreSQL"],"title":"Hello world","type":"post","url":"/testpage/","weight":0,"wordcount":2},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://nhatthanh020996.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me Huabing Zhao is a software architect, an Istio Member and an ONAP PTL. He has a solid experience in the information and telecommunication technology industry for more than 17 years. Throughout his career, he has built a number of large-scale, cross-country software systems, most of them are still running in production. He loves open source and has been contributing to various open source projects, he is a member","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":500}]