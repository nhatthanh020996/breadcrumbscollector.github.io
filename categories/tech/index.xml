<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on breadcrumbscollector</title>
    <link>https://nhatthanh020996.github.io/categories/tech/</link>
    <description>Recent content in Tech on breadcrumbscollector</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://nhatthanh020996.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Operating System (P1) - Process.</title>
      <link>https://nhatthanh020996.github.io/what-is-process/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/what-is-process/</guid>
      <description>1. Process concept. 1.1. The Process. Một chương trình đang được thực thi bởi máy tính gọi là Process, ví dụ: Bạn có một chương trình helloworld được viết bằng C trong file helloworld.c như sau:
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Hello, World!\n&amp;#34;); return 0; } Bạn tiến hành biên dịch chương trình trên bằng câu lệnh sau trên terminal:
gcc helloworld.c -o helloworld Bạn tiếp tục chạy câu lệnh sau trên terminal:</description>
    </item>
    
    <item>
      <title>Kiến thức ở trường đại học đã mang lại cho mình điều gì?</title>
      <link>https://nhatthanh020996.github.io/what-the-benefit-studying-university-bring-to-me/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/what-the-benefit-studying-university-bring-to-me/</guid>
      <description>Mình cũng từng học đại học, chuyên ngành Khoa học máy tính ở Đại học Bách Khoa Hà Nội. Những năm đi học cho đến khi ra trường khoảng 1-2 năm, mình luôn băn khoăn về việc liệu có đáng để bỏ thời gian 5 năm, với hàng trăm triệu tiền để học đại học hay không. Trong khi đó, có nhiều bạn học tại các trung tâm chỉ cần 6 tháng là có thể bắt đầu làm việc, hoặc học những khoá học Udemy giúp mình nắm kiến thức trong thời gian ngắn.</description>
    </item>
    
    <item>
      <title>Operating System (P2) - Memory Layers Of A Process</title>
      <link>https://nhatthanh020996.github.io/process-memory-layer/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/process-memory-layer/</guid>
      <description>2. Memory layers. Memory layers của một process sẽ 4 segment chính như hình vẽ dưới đây. Hình ảnh trên biểu thị memory layout của một chương trình C, ở đây data segment được chia ra bao gồm uninitialized data và initialized data, nhưng để cho đơn giản ta sẽ gọi 2 phần này là data segment.
Sau khi process được OS cung cấp memory, sẽ có data segment và text segment là những vùng nhớ cố định, không thay đổi về cả kích thước lẫn nội dung của 2 vùng nhớ này trong suốt quá trình process được thực thi.</description>
    </item>
    
    <item>
      <title>Git rebase và git merge</title>
      <link>https://nhatthanh020996.github.io/git-merge-and-git-rebase/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/git-merge-and-git-rebase/</guid>
      <description>Git merge thực sự là gì? Giả sử chúng ta đang ở branch A và muốn merge branch B vào branch A với câu lệnh:
git merge B Sẽ có 2 trường hợp xuất hiện:
B đang trỏ vào commit là commit cha của commit mà A đang trỏ vào. Ở đây Git sẽ tuân thủ fast forward strategy để merge B vào A. Kết quả sẽ xấy ra như ví dụ dưới đây: # A: C1 -&amp;gt; C2 -&amp;gt; C3 # B: C1 -&amp;gt; C2 -&amp;gt; C3 -&amp;gt; C4 -&amp;gt; C5 git merge B # result # A: C1 -&amp;gt; C2 -&amp;gt; C3 -&amp;gt; C4 -&amp;gt; C5 # B: C1 -&amp;gt; C2 -&amp;gt; C3 -&amp;gt; C4 -&amp;gt; C5 B đang trỏ vào commit không phải là cha của commit mà A đang trỏ vào.</description>
    </item>
    
    <item>
      <title>Git Internal</title>
      <link>https://nhatthanh020996.github.io/git-internal/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/git-internal/</guid>
      <description>Mở đầu. Chắc là chúng ta sẽ không mất nhiều thời gian để nói về Git nữa vì chúng quá phổ biến và gần gũi đúng không nào. Mình chỉ chia sẻ một chi tiết khá thú vị về nguồn gốc ra đời Git, Git được sáng tạo ra bởi Linus Torvalds - một cái tên quá nổi tiếng trong thế giới phần mềm rồi đúng không. Theo như những gì chia sẻ trong một cuộc phỏng vấn ở Ted Talk của tác giả, Git được ra đời vì Torvalds muốn tạo ra một công cụ nào đó giúp ông quản lý source code của Linux được hiệu quả hơn.</description>
    </item>
    
    <item>
      <title>Clean Architecture</title>
      <link>https://nhatthanh020996.github.io/clean/architecture/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/clean/architecture/</guid>
      <description>Mở đầu. Đầu tiên chúng ta phải thống nhất lại rằng Clean Architecture là 1 tên gọi được Robert Martin - một lập trình viên nổi tiếng người Mỹ đặt tên trong cuốn sách cùng tên nổi tiếng của ông, nó cũng giống như A architecture hay B architecture nào đó. Vì vậy Clean Architecture không nên hiểu là một kiến trúc tốt trong mọi hoàn cảnh. Dựa trên nhiều yếu tố như thời gian, độ phức tạp, tính thay đổi của dự án người lập trình viên sẽ chọn ra chọn đâu là kiến trúc code phù hợp nhất và nó không nhất thiết phải là Clean Architecture.</description>
    </item>
    
    <item>
      <title>Understanding Variable Behavior in Python and C: A Comparison</title>
      <link>https://nhatthanh020996.github.io/does-python-function-use-calling-value-or-calling-reference/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/does-python-function-use-calling-value-or-calling-reference/</guid>
      <description>In C. 1. Variable in C. We start with the following simple example:
#include &amp;lt;stdio.h&amp;gt; int main() { int x; printf(&amp;#34;address of x: %p&amp;#34;, &amp;amp;x); printf(&amp;#34;\nvalue of x: %d&amp;#34;, x); x = 1 printf(&amp;#34;address of x: %p&amp;#34;, &amp;amp;x); printf(&amp;#34;\nvalue of x: %d&amp;#34;, x); return 0; } // the result will be: /* address of x: 0x7ffcd47a5cc4 value of x: 0 address of x: 0x7ffcd47a5cc4 value of x: 1 */ In the above piece of code, when declaring x, we create a space that occupies 4bytes in memory for x variable.</description>
    </item>
    
    <item>
      <title>How to optimize sql query</title>
      <link>https://nhatthanh020996.github.io/how-to-optimize-sql-query/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/how-to-optimize-sql-query/</guid>
      <description>Optimize network Keep connection.
Create connection pooling.
Integrate many query in a connection.
Optimize query execution Avoid n+1 problem.
Using EXPLAIN query to inspect the query plan.
Indexing.
Partition.
Sharding.
Scale hardware Vertical scale (scale up)
Horizontal scale using Master-Slave architecture (scale out).</description>
    </item>
    
    <item>
      <title>Isolation property in ACID</title>
      <link>https://nhatthanh020996.github.io/isolation/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/isolation/</guid>
      <description>Read Phenomena Dirty reads: if you are in an inflight transaction, you can read something that some other transaction has written but didn’t really commit yet.
Non-repeatable reads: if you read a row once, then read it again, the second read could see different data if another transaction has modified it.
Phantom reads: if you run a query twice, the second query could see different rows if another transaction has inserted or deleted them.</description>
    </item>
    
    <item>
      <title>Pgbouncer</title>
      <link>https://nhatthanh020996.github.io/pgbouncer/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/pgbouncer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How database read records from disk</title>
      <link>https://nhatthanh020996.github.io/how-database-read-records-from-disk/</link>
      <pubDate>Mon, 12 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/how-database-read-records-from-disk/</guid>
      <description>Dadabase disk page </description>
    </item>
    
    <item>
      <title>Socket Programming</title>
      <link>https://nhatthanh020996.github.io/socket-programming/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/socket-programming/</guid>
      <description>Introduction. Conclusion. </description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://nhatthanh020996.github.io/testpage/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nhatthanh020996.github.io/testpage/</guid>
      <description>Hello world! </description>
    </item>
    
  </channel>
</rss>
